#include "LepEff.h"
#include "TMath.h"
void LepEff::init(int varBins, const char* strVar) {
    nVarBins = varBins;

    const double fMomBins[] = {0.0,  0.5,  1.0,  1.5,  2.0,  2.5,  3.0,  3.5,  4.0,  4.5,  5.0};

    iError = 0;

    // Electrons
    axis_plep[0] = new TAxis(nEffMomBins, fMomBins);
    const double fThetaBinsElec[] = {18, 25, 35,  40,  60,  125,  132,  151};
    axis_theta[0] = new TAxis(nEffThetaBins, fThetaBinsElec);

    // Muons
    axis_plep[1] = new TAxis(nEffMomBins, fMomBins);
    const double fThetaBinsMuon[] = {17, 25, 37,  51,  117,  130,  145,  150};
    axis_theta[1] = new TAxis(nEffThetaBins, fThetaBinsMuon);

    iPosWeight = 4;
    iPosErrStat = 5;
    iPosErrSyst1 = 6;
    iPosErrSyst2 = 7;

    hEntries = new TH2F**[nVarBins];
    char text[200];
    for (int iVarBin=0; iVarBin<nVarBins; iVarBin++) {
        hEntries[iVarBin] = new TH2F*[4];
        for (int i=0; i<4; i++) {
            sprintf(text, "h_LepEffEntries_%s_bin%03i_efftableno%02i", strVar, iVarBin, i);
            hEntries[iVarBin][i] = new TH2F(text, text, nEffMomBins, fMomBins, nEffThetaBins, (i == 0) ? fThetaBinsElec : fThetaBinsMuon);
        }
    }

}

LepEff::LepEff() {
    init(1, "default");
}

LepEff::LepEff(int varBins, const char* strVar) {
    init(varBins, strVar);
}

LepEff::~LepEff() {
    for (int iVarBin=0; iVarBin<nVarBins; iVarBin++) {
        for (int i=0; i<4; i++) {
            delete hEntries[iVarBin][i];
        }
        delete[] hEntries[iVarBin];
    }
    delete[] hEntries;
}

float LepEff::lookup(int lep_gen, int exp_no, int iBinTheta, int iBinLepMom, int iType) {
    if (iType < 0 || iType >= nColumns) return -1;
    if (iBinTheta < 0 || iBinTheta >= nEffThetaBins) return -1;
    if (iBinLepMom < 0 || iBinLepMom >= nEffMomBins) return -1;
    int iPosition = iBinTheta*nColumns*nEffMomBins+iBinLepMom*nColumns+iType;
    if (lep_gen == 0) return fElecEff[iPosition];
    else if (exp_no <= 39) return fMuonEff31[iPosition];
    else if (exp_no <= 49) return fMuonEff41[iPosition];
    else return fMuonEff51[iPosition];
    return -1;
}

float LepEff::lookup(int lep_gen, int exp_no, float theta, float plep, int iType) {
    if (lep_gen < 0 || lep_gen > 1) return -1;
    int iBinTheta = axis_theta[lep_gen]->FindBin(theta) - 1;
    int iBinLepMom = axis_plep[lep_gen]->FindBin(plep) - 1;
    return lookup(lep_gen, exp_no, iBinTheta, iBinLepMom, iType);
}

float LepEff::weight(int lep_gen, int exp_no, float theta, float plep, int iVarBin, int iNoError) {
    int i = -1;
    if (lep_gen == 0) i = 0;
    else if (exp_no <= 39) i = 1;
    else if (exp_no <= 49) i = 2;
    else i = 3;

    float fResult = lookup(lep_gen, exp_no, theta, plep, iPosWeight);
    if (fResult < 0) return 1.;
    if(!iError) {
	    if (iVarBin >= 0 && iVarBin < nVarBins && !iNoError) hEntries[iVarBin][i]->Fill(plep, theta);
	    return fResult;
    }
    else
	    return fResult + pow(-1, iError)*calcRelBinError(iVarBin);
}

float LepEff::errStat(int lep_gen, int exp_no, int theta, int plep) {
    float fResult = lookup(lep_gen, exp_no, theta, plep, iPosErrStat);
    if (fResult < 0) return 0.;
    return fResult;
}

float LepEff::errSyst1(int lep_gen, int exp_no, int theta, int plep) {
    float fResult = lookup(lep_gen, exp_no, theta, plep, iPosErrSyst1);
    if (fResult < 0) return 0.;
    return fResult;
}

float LepEff::errSyst2(int lep_gen, int exp_no, int theta, int plep) {
    float fResult = lookup(lep_gen, exp_no, theta, plep, iPosErrSyst2);
    if (fResult < 0) return 0.;
    return fResult;
}

float LepEff::calcBinError(int iVarBin) {
    if (iVarBin < 0 || iVarBin >= nVarBins) return -1;
    float fErrTotStat2 = 0;
    float fErrTotSyst1 = 0.;
    float fErrTotSyst2 = 0.;
    for (int i = 0; i < 4; i++) {
        int exp_no = (i+2)*10 + 5;
        int lep_gen = (i==0) ? 0 : 1;
        for (int iBinLepMom=0; iBinLepMom<nEffMomBins; iBinLepMom++) {
            for (int iBinTheta=0; iBinTheta<nEffThetaBins; iBinTheta++) {
                int nEntries = hEntries[iVarBin][i]->GetBinContent(iBinLepMom+1, iBinTheta+1);
                float fErrStat = errStat(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotStat2 += (fErrStat*fErrStat);
                float fErrSyst1 = errSyst1(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotSyst1 += fErrSyst1;
                float fErrSyst2 = errSyst2(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotSyst2 += fErrSyst2;
            }
        }
    }
    return TMath::Sqrt(fErrTotStat2+fErrTotSyst1*fErrTotSyst1+fErrTotSyst2*fErrTotSyst2);
}

float LepEff::calcRelBinError(int iVarBin) {
    if (iVarBin < 0 || iVarBin >= nVarBins) return -1;
    float fErrTotStat2 = 0;
    float fErrTotSyst1 = 0.;
    float fErrTotSyst2 = 0.;
    float nTotalEntries = 0;
    for (int i = 0; i < 4; i++) {
        int exp_no = (i+2)*10 + 5;
        int lep_gen = (i==0) ? 0 : 1;
        for (int iBinLepMom=0; iBinLepMom<nEffMomBins; iBinLepMom++) {
            for (int iBinTheta=0; iBinTheta<nEffThetaBins; iBinTheta++) {
                int nEntries = hEntries[iVarBin][i]->GetBinContent(iBinLepMom+1, iBinTheta+1);
		nTotalEntries += nEntries;
                float fErrStat = errStat(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotStat2 += (fErrStat*fErrStat);
                float fErrSyst1 = errSyst1(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotSyst1 += fErrSyst1;
                float fErrSyst2 = errSyst2(lep_gen, exp_no, iBinTheta, iBinLepMom)*nEntries;
                fErrTotSyst2 += fErrSyst2;
            }
        }
    }
    if(nTotalEntries >0)
    	return TMath::Sqrt(fErrTotStat2+fErrTotSyst1*fErrTotSyst1+fErrTotSyst2*fErrTotSyst2)/nTotalEntries;
    else 
	return 0;
}

void LepEff::reset() {
    for (int iVarBin=0; iVarBin<nVarBins; iVarBin++) {
        for (int i=0; i<4; i++) {
            hEntries[iVarBin][i]->Reset();
        }
    }
    iError = 0;
}

const int LepEff::nEffMomBins = 10;
const int LepEff::nEffThetaBins = 7;
const int LepEff::nColumns = 8;

const float LepEff::fElecEff[] = {
    18, 25, 0, 0.5, 1, 0, 0.0029, 0.0449,
    18, 25, 0.5, 1, 0.9747, 0.0004, 0.0029, 0.0449,
    18, 25, 1, 1.5, 0.9814, 0.0002, 0.0029, 0.0449,
    18, 25, 1.5, 2, 0.9845, 0.0002, 0.0029, 0.015,
    18, 25, 2, 2.5, 0.9821, 0.0004, 0.0029, 0.015,
    18, 25, 2.5, 3, 0.9791, 0.0008, 0.0029, 0.015,
    18, 25, 3, 3.5, 0.9783, 0.0011, 0.0029, 0.015,
    18, 25, 3.5, 4, 0.9789, 0.0017, 0.0029, 0.015,
    18, 25, 4, 4.5, 0.9804, 0.0075, 0.0029, 0.015,
    18, 25, 4.5, 5, 0.9214, 0.0103, 0.0029, 0.015,
    25, 35, 0, 0.5, 1, 0, 0.0068, 0.0449,
    25, 35, 0.5, 1, 0.9346, 0.0005, 0.0068, 0.0449,
    25, 35, 1, 1.5, 0.9548, 0.0006, 0.0068, 0.0449,
    25, 35, 1.5, 2, 0.9792, 0.001, 0.0068, 0.015,
    25, 35, 2, 2.5, 0.9829, 0.0016, 0.0068, 0.015,
    25, 35, 2.5, 3, 0.9755, 0.0026, 0.0068, 0.015,
    25, 35, 3, 3.5, 0.9723, 0.0044, 0.0068, 0.015,
    25, 35, 3.5, 4, 0.9628, 0.0109, 0.0068, 0.015,
    25, 35, 4, 4.5, 1.0163, 0.0659, 0.0068, 0.015,
    25, 35, 4.5, 5, 1, 0, 0.0068, 0.015,
    35, 40, 0, 0.5, 0.8236, 0.0107, 0.0097, 0.0449,
    35, 40, 0.5, 1, 0.8934, 0.001, 0.0097, 0.0449,
    35, 40, 1, 1.5, 0.9658, 0.0012, 0.0097, 0.0449,
    35, 40, 1.5, 2, 0.9867, 0.0015, 0.0097, 0.015,
    35, 40, 2, 2.5, 0.9958, 0.0023, 0.0097, 0.015,
    35, 40, 2.5, 3, 0.9867, 0.003, 0.0097, 0.015,
    35, 40, 3, 3.5, 0.9802, 0.0058, 0.0097, 0.015,
    35, 40, 3.5, 4, 0.9145, 0.0099, 0.0097, 0.015,
    35, 40, 4, 4.5, 1, 0, 0.0097, 0.015,
    35, 40, 4.5, 5, 1, 0, 0.0097, 0.015,
    40, 60, 0, 0.5, 0.9548, 0.0019, 0.0045, 0.0449,
    40, 60, 0.5, 1, 0.9448, 0.0005, 0.0045, 0.0449,
    40, 60, 1, 1.5, 0.9721, 0.0007, 0.0045, 0.0449,
    40, 60, 1.5, 2, 0.9881, 0.0009, 0.0045, 0.015,
    40, 60, 2, 2.5, 0.9874, 0.0014, 0.0045, 0.015,
    40, 60, 2.5, 3, 0.981, 0.0027, 0.0045, 0.015,
    40, 60, 3, 3.5, 0.9734, 0.0107, 0.0045, 0.015,
    40, 60, 3.5, 4, 1, 0, 0.0045, 0.015,
    40, 60, 4, 4.5, 1, 0, 0.0045, 0.015,
    40, 60, 4.5, 5, 1, 0, 0.0045, 0.015,
    60, 125, 0, 0.5, 0.9614, 0.0006, 0.0046, 0.0091,
    60, 125, 0.5, 1, 0.9715, 0.0003, 0.0046, 0.0091,
    60, 125, 1, 1.5, 0.9807, 0.0005, 0.0046, 0.0091,
    60, 125, 1.5, 2, 0.9845, 0.0007, 0.0046, 0.0123,
    60, 125, 2, 2.5, 0.9816, 0.0016, 0.0046, 0.0123,
    60, 125, 2.5, 3, 0.9423, 0.0032, 0.0046, 0.0123,
    60, 125, 3, 3.5, 1, 0, 0.0046, 0.0123,
    60, 125, 3.5, 4, 1, 0, 0.0046, 0.0123,
    60, 125, 4, 4.5, 1, 0, 0.0046, 0.0123,
    60, 125, 4.5, 5, 1, 0, 0.0046, 0.0123,
    125, 132, 0, 0.5, 0.7858, 0.0035, 0.0261, 0.0185,
    125, 132, 0.5, 1, 1.0575, 0.0026, 0.0261, 0.0185,
    125, 132, 1, 1.5, 0.9872, 0.006, 0.0261, 0.0185,
    125, 132, 1.5, 2, 1.0002, 0.0146, 0.0261, 0.0448,
    125, 132, 2, 2.5, 1.0073, 0.0503, 0.0261, 0.0448,
    125, 132, 2.5, 3, 1, 0, 0.0261, 0.0448,
    125, 132, 3, 3.5, 1, 0, 0.0261, 0.0448,
    125, 132, 3.5, 4, 1, 0, 0.0261, 0.0448,
    125, 132, 4, 4.5, 1, 0, 0.0261, 0.0448,
    125, 132, 4.5, 5, 1, 0, 0.0261, 0.0448,
    132, 151, 0, 0.5, 1.0231, 0.004, 0.0071, 0.0185,
    132, 151, 0.5, 1, 1.0374, 0.0007, 0.0071, 0.0185,
    132, 151, 1, 1.5, 0.9864, 0.0009, 0.0071, 0.0185,
    132, 151, 1.5, 2, 0.9691, 0.0018, 0.0071, 0.0448,
    132, 151, 2, 2.5, 0.9609, 0.0096, 0.0071, 0.0448,
    132, 151, 2.5, 3, 1, 0, 0.0071, 0.0448,
    132, 151, 3, 3.5, 1, 0, 0.0071, 0.0448,
    132, 151, 3.5, 4, 1, 0, 0.0071, 0.0448,
    132, 151, 4, 4.5, 1, 0, 0.0071, 0.0448,
    132, 151, 4.5, 5, 1, 0, 0.0071, 0.0448
};

// eff(data) / eff(MC) exp 31..39
const float LepEff::fMuonEff31[] = {
    17,25,0,0.5,1,0,0.0326,0.0403,
    17,25,0.5,1,1,0,0.0326,0.0403,
    17,25,1,1.5,0.5579,0.0327,0.0326,0.0403,
    17,25,1.5,2,0.6132,0.0063,0.0326,0.0403,
    17,25,2,2.5,0.4828,0.0033,0.0326,0.0403,
    17,25,2.5,3,0.4623,0.003,0.0326,0.0403,
    17,25,3,3.5,0.4341,0.0034,0.0326,0.0403,
    17,25,3.5,4,0.4013,0.0045,0.0326,0.0403,
    17,25,4,4.5,0.3328,0.0081,0.0326,0.0403,
    17,25,4.5,5,1,0,0.0326,0.0403,
    25,37,0,0.5,1,0,0.007,0.0403,
    25,37,0.5,1,0.813,0.0096,0.007,0.0403,
    25,37,1,1.5,0.9142,0.002,0.007,0.0403,
    25,37,1.5,2,0.9072,0.0014,0.007,0.0403,
    25,37,2,2.5,0.886,0.0015,0.007,0.0403,
    25,37,2.5,3,0.8615,0.0019,0.007,0.0403,
    25,37,3,3.5,0.8507,0.0026,0.007,0.0403,
    25,37,3.5,4,0.8162,0.0045,0.007,0.0403,
    25,37,4,4.5,0.7386,0.0203,0.007,0.0403,
    25,37,4.5,5,1,0,0.007,0.0403,
    37,51,0,0.5,1,0,0.0061,0.0403,
    37,51,0.5,1,0.9349,0.0056,0.0061,0.0403,
    37,51,1,1.5,0.9645,0.0016,0.0061,0.0403,
    37,51,1.5,2,0.9849,0.0014,0.0061,0.0403,
    37,51,2,2.5,0.9729,0.0024,0.0061,0.0403,
    37,51,2.5,3,0.963,0.0039,0.0061,0.0403,
    37,51,3,3.5,0.9771,0.0066,0.0061,0.0403,
    37,51,3.5,4,0.8059,0.054,0.0061,0.0403,
    37,51,4,4.5,1,0,0.0061,0.0403,
    37,51,4.5,5,1,0,0.0061,0.0403,
    51,117,0,0.5,1,0,0.003,0.0044,
    51,117,0.5,1,1.026,0.0014,0.003,0.0044,
    51,117,1,1.5,0.9901,0.0006,0.003,0.0044,
    51,117,1.5,2,0.9802,0.0008,0.003,0.0044,
    51,117,2,2.5,0.9694,0.0015,0.003,0.0044,
    51,117,2.5,3,0.9575,0.0039,0.003,0.0044,
    51,117,3,3.5,1,0,0.003,0.0044,
    51,117,3.5,4,1,0,0.003,0.0044,
    51,117,4,4.5,1,0,0.003,0.0044,
    51,117,4.5,5,1,0,0.003,0.0044,
    117,130,0,0.5,1,0,0.0046,0.0429,
    117,130,0.5,1,0.9633,0.0052,0.0046,0.0429,
    117,130,1,1.5,0.9655,0.002,0.0046,0.0429,
    117,130,1.5,2,0.9833,0.0024,0.0046,0.0429,
    117,130,2,2.5,0.9642,0.0055,0.0046,0.0429,
    117,130,2.5,3,0.9658,0.0118,0.0046,0.0429,
    117,130,3,3.5,1,0,0.0046,0.0429,
    117,130,3.5,4,1,0,0.0046,0.0429,
    117,130,4,4.5,1,0,0.0046,0.0429,
    117,130,4.5,5,1,0,0.0046,0.0429,
    130,145,0,0.5,1,0,0.0063,0.0429,
    130,145,0.5,1,0.7397,0.0057,0.0063,0.0429,
    130,145,1,1.5,0.9526,0.0021,0.0063,0.0429,
    130,145,1.5,2,0.9698,0.0017,0.0063,0.0429,
    130,145,2,2.5,0.9514,0.0024,0.0063,0.0429,
    130,145,2.5,3,0.9612,0.0047,0.0063,0.0429,
    130,145,3,3.5,0.9503,0.0315,0.0063,0.0429,
    130,145,3.5,4,1,0,0.0063,0.0429,
    130,145,4,4.5,1,0,0.0063,0.0429,
    130,145,4.5,5,1,0,0.0063,0.0429,
    145,150,0,0.5,1,0,0.0319,0.0429,
    145,150,0.5,1,1,0,0.0319,0.0429,
    145,150,1,1.5,0.3813,0.0177,0.0319,0.0429,
    145,150,1.5,2,0.6031,0.005,0.0319,0.0429,
    145,150,2,2.5,0.6049,0.0038,0.0319,0.0429,
    145,150,2.5,3,0.6383,0.0058,0.0319,0.0429,
    145,150,3,3.5,0.6647,0.0203,0.0319,0.0429,
    145,150,3.5,4,1,0,0.0319,0.0429,
    145,150,4,4.5,1,0,0.0319,0.0429,
    145,150,4.5,5,1,0,0.0319,0.0429
};


// eff(data) / eff(MC) exp 41..49
const float LepEff::fMuonEff41[] = {
    17, 25, 0, 0.5, 1, 0, 0.0815, 0.0403,
    17, 25, 0.5, 1, 1, 0, 0.0815, 0.0403,
    17, 25, 1, 1.5, 0.4227, 0.0277, 0.0815, 0.0403,
    17, 25, 1.5, 2, 0.4744, 0.0055, 0.0815, 0.0403,
    17, 25, 2, 2.5, 0.3588, 0.0027, 0.0815, 0.0403,
    17, 25, 2.5, 3, 0.3431, 0.0025, 0.0815, 0.0403,
    17, 25, 3, 3.5, 0.3155, 0.0029, 0.0815, 0.0403,
    17, 25, 3.5, 4, 0.3011, 0.0039, 0.0815, 0.0403,
    17, 25, 4, 4.5, 0.232, 0.0065, 0.0815, 0.0403,
    17, 25, 4.5, 5, 0.1388, 0.1672, 0.0815, 0.0403,
    25, 37, 0, 0.5, 1, 0, 0.0186, 0.0403,
    25, 37, 0.5, 1, 0.7907, 0.0104, 0.0186, 0.0403,
    25, 37, 1, 1.5, 0.8956, 0.0022, 0.0186, 0.0403,
    25, 37, 1.5, 2, 0.8705, 0.0015, 0.0186, 0.0403,
    25, 37, 2, 2.5, 0.8429, 0.0016, 0.0186, 0.0403,
    25, 37, 2.5, 3, 0.8178, 0.0021, 0.0186, 0.0403,
    25, 37, 3, 3.5, 0.8014, 0.0028, 0.0186, 0.0403,
    25, 37, 3.5, 4, 0.7696, 0.0048, 0.0186, 0.0403,
    25, 37, 4, 4.5, 0.6309, 0.0184, 0.0186, 0.0403,
    25, 37, 4.5, 5, 1, 0, 0.0186, 0.0403,
    37, 51, 0, 0.5, 1, 0, 0.0052, 0.0403,
    37, 51, 0.5, 1, 0.9531, 0.0068, 0.0052, 0.0403,
    37, 51, 1, 1.5, 0.9625, 0.0019, 0.0052, 0.0403,
    37, 51, 1.5, 2, 0.9863, 0.0016, 0.0052, 0.0403,
    37, 51, 2, 2.5, 0.9795, 0.0029, 0.0052, 0.0403,
    37, 51, 2.5, 3, 0.9604, 0.0044, 0.0052, 0.0403,
    37, 51, 3, 3.5, 0.9772, 0.0071, 0.0052, 0.0403,
    37, 51, 3.5, 4, 0.9807, 0.0434, 0.0052, 0.0403,
    37, 51, 4, 4.5, 1, 0, 0.0052, 0.0403,
    37, 51, 4.5, 5, 1, 0, 0.0052, 0.0403,
    51, 117, 0, 0.5, 1, 0, 0.0028, 0.0044,
    51, 117, 0.5, 1, 1.0343, 0.0016, 0.0028, 0.0044,
    51, 117, 1, 1.5, 0.9872, 0.0008, 0.0028, 0.0044,
    51, 117, 1.5, 2, 0.9762, 0.001, 0.0028, 0.0044,
    51, 117, 2, 2.5, 0.9612, 0.0019, 0.0028, 0.0044,
    51, 117, 2.5, 3, 0.9354, 0.0044, 0.0028, 0.0044,
    51, 117, 3, 3.5, 1, 0, 0.0028, 0.0044,
    51, 117, 3.5, 4, 1, 0, 0.0028, 0.0044,
    51, 117, 4, 4.5, 1, 0, 0.0028, 0.0044,
    51, 117, 4.5, 5, 1, 0, 0.0028, 0.0044,
    117, 130, 0, 0.5, 1, 0, 0.0043, 0.0429,
    117, 130, 0.5, 1, 0.9797, 0.006, 0.0043, 0.0429,
    117, 130, 1, 1.5, 0.9662, 0.0023, 0.0043, 0.0429,
    117, 130, 1.5, 2, 0.9866, 0.0028, 0.0043, 0.0429,
    117, 130, 2, 2.5, 0.9636, 0.0064, 0.0043, 0.0429,
    117, 130, 2.5, 3, 0.9923, 0.013, 0.0043, 0.0429,
    117, 130, 3, 3.5, 1, 0, 0.0043, 0.0429,
    117, 130, 3.5, 4, 1, 0, 0.0043, 0.0429,
    117, 130, 4, 4.5, 1, 0, 0.0043, 0.0429,
    117, 130, 4.5, 5, 1, 0, 0.0043, 0.0429,
    130, 145, 0, 0.5, 1, 0, 0.0104, 0.0429,
    130, 145, 0.5, 1, 0.7304, 0.0061, 0.0104, 0.0429,
    130, 145, 1, 1.5, 0.9453, 0.0024, 0.0104, 0.0429,
    130, 145, 1.5, 2, 0.9539, 0.0019, 0.0104, 0.0429,
    130, 145, 2, 2.5, 0.9403, 0.0028, 0.0104, 0.0429,
    130, 145, 2.5, 3, 0.9338, 0.0051, 0.0104, 0.0429,
    130, 145, 3, 3.5, 0.8999, 0.0282, 0.0104, 0.0429,
    130, 145, 3.5, 4, 1, 0, 0.0104, 0.0429,
    130, 145, 4, 4.5, 1, 0, 0.0104, 0.0429,
    130, 145, 4.5, 5, 1, 0, 0.0104, 0.0429,
    145, 150, 0, 0.5, 1, 0, 0.0701, 0.0429,
    145, 150, 0.5, 1, 1, 0, 0.0701, 0.0429,
    145, 150, 1, 1.5, 0.2794, 0.0143, 0.0701, 0.0429,
    145, 150, 1.5, 2, 0.4754, 0.0045, 0.0701, 0.0429,
    145, 150, 2, 2.5, 0.4724, 0.0034, 0.0701, 0.0429,
    145, 150, 2.5, 3, 0.4885, 0.005, 0.0701, 0.0429,
    145, 150, 3, 3.5, 0.5103, 0.0171, 0.0701, 0.0429,
    145, 150, 3.5, 4, 1, 0, 0.0701, 0.0429,
    145, 150, 4, 4.5, 1, 0, 0.0701, 0.0429,
    145, 150, 4.5, 5, 1, 0, 0.0701, 0.0429
};

const float LepEff::fMuonEff51[] = {
    17, 25, 0, 0.5, 1, 0, 0.0539, 0.0403,
    17, 25, 0.5, 1, 1, 0, 0.0539, 0.0403,
    17, 25, 1, 1.5, 0.5339, 0.0335, 0.0539, 0.0403,
    17, 25, 1.5, 2, 0.6515, 0.0066, 0.0539, 0.0403,
    17, 25, 2, 2.5, 0.6949, 0.0042, 0.0539, 0.0403,
    17, 25, 2.5, 3, 0.6884, 0.0042, 0.0539, 0.0403,
    17, 25, 3, 3.5, 0.6772, 0.005, 0.0539, 0.0403,
    17, 25, 3.5, 4, 0.6499, 0.0069, 0.0539, 0.0403,
    17, 25, 4, 4.5, 0.5784, 0.0129, 0.0539, 0.0403,
    17, 25, 4.5, 5, 0.3696, 0.2169, 0.0539, 0.0403,
    25, 37, 0, 0.5, 1, 0, 0.0097, 0.0403,
    25, 37, 0.5, 1, 0.9157, 0.0118, 0.0097, 0.0403,
    25, 37, 1, 1.5, 0.9765, 0.0023, 0.0097, 0.0403,
    25, 37, 1.5, 2, 1.0065, 0.0016, 0.0097, 0.0403,
    25, 37, 2, 2.5, 1.0004, 0.0018, 0.0097, 0.0403,
    25, 37, 2.5, 3, 0.9872, 0.0023, 0.0097, 0.0403,
    25, 37, 3, 3.5, 0.9722, 0.0029, 0.0097, 0.0403,
    25, 37, 3.5, 4, 0.9698, 0.0051, 0.0097, 0.0403,
    25, 37, 4, 4.5, 0.9711, 0.0266, 0.0097, 0.0403,
    25, 37, 4.5, 5, 1, 0, 0.0097, 0.0403,
    37, 51, 0, 0.5, 1, 0, 0.005, 0.0403,
    37, 51, 0.5, 1, 0.9782, 0.0065, 0.005, 0.0403,
    37, 51, 1, 1.5, 0.9773, 0.0018, 0.005, 0.0403,
    37, 51, 1.5, 2, 0.9983, 0.0016, 0.005, 0.0403,
    37, 51, 2, 2.5, 0.9842, 0.0027, 0.005, 0.0403,
    37, 51, 2.5, 3, 0.9687, 0.0043, 0.005, 0.0403,
    37, 51, 3, 3.5, 1.0096, 0.0074, 0.005, 0.0403,
    37, 51, 3.5, 4, 0.9823, 0.0334, 0.005, 0.0403,
    37, 51, 4, 4.5, 1, 0, 0.005, 0.0403,
    37, 51, 4.5, 5, 1, 0, 0.005, 0.0403,
    51, 117, 0, 0.5, 1, 0, 0.0034, 0.0044,
    51, 117, 0.5, 1, 1.0437, 0.0016, 0.0034, 0.0044,
    51, 117, 1, 1.5, 0.9898, 0.0007, 0.0034, 0.0044,
    51, 117, 1.5, 2, 0.9806, 0.0009, 0.0034, 0.0044,
    51, 117, 2, 2.5, 0.9643, 0.0016, 0.0034, 0.0044,
    51, 117, 2.5, 3, 0.9424, 0.0039, 0.0034, 0.0044,
    51, 117, 3, 3.5, 1, 0, 0.0034, 0.0044,
    51, 117, 3.5, 4, 1, 0, 0.0034, 0.0044,
    51, 117, 4, 4.5, 1, 0, 0.0034, 0.0044,
    51, 117, 4.5, 5, 1, 0, 0.0034, 0.0044,
    117, 130, 0, 0.5, 1, 0, 0.0056, 0.0429,
    117, 130, 0.5, 1, 0.9979, 0.006, 0.0056, 0.0429,
    117, 130, 1, 1.5, 0.9788, 0.0023, 0.0056, 0.0429,
    117, 130, 1.5, 2, 0.9923, 0.0028, 0.0056, 0.0429,
    117, 130, 2, 2.5, 0.9511, 0.0059, 0.0056, 0.0429,
    117, 130, 2.5, 3, 1.0048, 0.0134, 0.0056, 0.0429,
    117, 130, 3, 3.5, 1, 0, 0.0056, 0.0429,
    117, 130, 3.5, 4, 1, 0, 0.0056, 0.0429,
    117, 130, 4, 4.5, 1, 0, 0.0056, 0.0429,
    117, 130, 4.5, 5, 1, 0, 0.0056, 0.0429,
    130, 145, 0, 0.5, 1, 0, 0.0105, 0.0429,
    130, 145, 0.5, 1, 0.8257, 0.0064, 0.0105, 0.0429,
    130, 145, 1, 1.5, 0.9611, 0.0023, 0.0105, 0.0429,
    130, 145, 1.5, 2, 0.967, 0.0018, 0.0105, 0.0429,
    130, 145, 2, 2.5, 0.9595, 0.0026, 0.0105, 0.0429,
    130, 145, 2.5, 3, 0.962, 0.005, 0.0105, 0.0429,
    130, 145, 3, 3.5, 0.9269, 0.0254, 0.0105, 0.0429,
    130, 145, 3.5, 4, 1, 0, 0.0105, 0.0429,
    130, 145, 4, 4.5, 1, 0, 0.0105, 0.0429,
    130, 145, 4.5, 5, 1, 0, 0.0105, 0.0429,
    145, 150, 0, 0.5, 1, 0, 0.0682, 0.0429,
    145, 150, 0.5, 1, 1, 0, 0.0682, 0.0429,
    145, 150, 1, 1.5, 0.2511, 0.0109, 0.0682, 0.0429,
    145, 150, 1.5, 2, 0.4802, 0.0038, 0.0682, 0.0429,
    145, 150, 2, 2.5, 0.5418, 0.0031, 0.0682, 0.0429,
    145, 150, 2.5, 3, 0.5707, 0.0047, 0.0682, 0.0429,
    145, 150, 3, 3.5, 0.5605, 0.0131, 0.0682, 0.0429,
    145, 150, 3.5, 4, 1, 0, 0.0682, 0.0429,
    145, 150, 4, 4.5, 1, 0, 0.0682, 0.0429,
    145, 150, 4.5, 5, 1, 0, 0.0682, 0.0429
};
